<?php

namespace Repository;

use App\Jobs\RemindAccountJob;
use App\Models\Company;
use App\Models\JobType;
use App\Models\User;
use App\Notifications\SendNotification;
use App\Repositories\Contracts\CompanyRepositoryInterface;
use Helper\Common;
use Helper\ResponseService;
use Illuminate\Foundation\Application;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Str;
use Tymon\JWTAuth\Facades\JWTAuth;

class CompanyRepository extends BaseRepository implements CompanyRepositoryInterface
{
    public function __construct(Application $app)
    {
        parent::__construct($app);
    }

    /**
     * Instantiate model
     *
     * @param Company $model
     */

    public function model()
    {
        return Company::class;
    }

    public function getAll($request)
    {
        $data = $this->with(['jobType', 'job']);
        if ($request->has('field') && $request->field) {
            if ($request->field == 'status'){
                $data = Common::sortArrayText($data, "status", User::listStatus(), $request->sort_by == 'asc');
            }elseif ($request->field == 'field'){
                $jobType = JobType::query()->where('type',JOB_TYPE)->pluck('name_ja', 'id')->toArray();
                $data = Common::sortArrayText($data, "major_classification", $jobType, $request->sort_by == 'asc');
            }else{
                $data = $data->orderBy('id', 'desc');
            }
        }
        return Common::pagination($request, $data);
    }

    public function update(array $attributes, $id)
    {
        return parent::update($attributes, $id); // TODO: Change the autogenerated stub
    }


    public function create(array $attributes)
    {
        if($attributes['is_create']) {
            $attributes['status'] = EXAMINATION_PENDING;
            $data = parent::create($attributes);
            $user = User::where('type', SUPER_ADMIN)
                ->orwhere('type', COMPANY_MANAGER)
                ->get();

            $notify = [
                'type' => TYPE_NOTIFY['register_company'],
                'content' => trans('messages.notify_register_account_company'),
            ];

            RemindAccountJob::dispatch(COMPANY, Company::class);

//            $schedule->job(new RemindAccountJob(HR_MANAGER, HrOrganization::class))->weeklyOn(1, '0:00');
//            $schedule->job(new RemindAccountJob(COMPANY, Company::class))->weeklyOn(1, '0:00');
//            Notification::send($user, new SendNotification($notify));

            return $data;
        }
        return;
    }
}
