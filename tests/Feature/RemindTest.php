<?php

namespace Tests\Feature;

use App\Jobs\RemindAccountJob;
use App\Jobs\RemindEntryJob;
use App\Jobs\RemindInterViewJob;
use App\Jobs\RemindOfferJob;
use App\Models\Company;
use App\Models\Entry;
use App\Models\HR;
use App\Models\HrOrganization;
use App\Models\Interview;
use App\Models\JobInfo;
use App\Models\JobType;
use App\Models\Offer;
use App\Models\User;
use App\Models\Work;
use App\Notifications\RemindAccountNotification;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Notification;


class  RemindTest extends BaseTest
{
//    use RefreshDatabase;
    private $dataTestCompany;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //setup company account
        $majorId = JobType::query()
            ->where('type', MAJOR_CLASSIFICATION)
            ->inRandomOrder()
            ->value('id');
        $middleId = JobInfo::query()
            ->where('job_type_id', $majorId)
            ->value('id');
        $this->dataTestCompany = [
            Company::COMPANY_NAME => 'City Computer Co., Ltd.',
            Company::COMPANY_NAME_JP => 'シティコンピュータ株式会社',
            Company::MAJOR_CLASSIFICATION => $majorId,
            Company::MIDDLE_CLASSIFICATION => $middleId,
            Company::POST_CODE => '1020093',
            Company::PREFECTURES => '東京都',
            Company::MUNICIPALITY => '千代田区平河町',
            Company::NUMBER => '1-7-10',
            Company::OTHER => '大盛丸平河町ビル2階',
            Company::TELEPHONE_NUMBER => '+84 0312345678',
            Company::MAIL_ADDRESS => 'tuancuongth88@gmail.com',
            Company::URL => 'https://okuridashi_hanoi.com',
            Company::JOB_TITLE => '代表取締役会長',
            Company::FULL_NAME => '鈴木　太郎',
            Company::FULL_NAME_FURIGANA => 'スズキ　タロウ',
            Company::REPRESENTATIVE_CONTACT => '+84 0312345678',
            Company::ASSIGNEE_CONTACT => '+84 0312345678',
        ];

        $this->createHrs();

    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testRemindCompanyAccountWhenCreateWithStagnantStatusUpdate()
    {
        $data = $this->dataTestCompany;
        $data['created_at'] = Carbon::now()->subDay(6);
        $data['updated_at'] = Carbon::now()->subDay(6);
        Company::factory()->create($data);
        $userAdmin = User::query()->where('type', SUPER_ADMIN)->first();
        $job = new RemindAccountJob(COMPANY, Company::class);
        $job->handle();
        $this->assertNotification($userAdmin);
    }


    public function testRemindEntryWithStagnantStatusUpdate()
    {
        $data = [
            'code' => rand(10000, 99999),
            'request_date' => Carbon::now()->subDay(6)->format('Y-m-d'),
            'status' =>'1',
        ];
        $this->createDataMatching(Entry::class, $data);
        $userAdmin = User::query()->where('type', SUPER_ADMIN)->first();
        $job = new RemindEntryJob();
        $job->handle();
        $this->assertNotification($userAdmin);
    }

    public function testSetAndResetInterviewDateWithStagnantStatusUpdate()
    {
        $userAdmin = User::query()->where('type', SUPER_ADMIN)->first();
        $data = [
                    'interview_date' => Carbon::now()->subDay(6)->format('Y-m-d'),
                    'status_selection' => INTERVIEW_STATUS_SELECTION_OFFER_CONFIRM,
                    'status_interview_adjustment' => INTERVIEW_STATUS_INTERVIEW_ADJUSTMENT_BEFORE_ADJUSTMENT,
                    'remarks' => $this->faker->text
                ];
        $this->createDataMatching(Interview::class, $data);
        $job = new RemindInterViewJob();
        $job->handle();
        $this->assertNotification($userAdmin);
    }

    public function testJudgePassOrFailForAnInterviewWithStagnantStatusUpdate()
    {
        $userAdmin = User::query()->where('type', SUPER_ADMIN)->first();
        $data = [
            'interview_date' => Carbon::now()->subDay(6)->format('Y-m-d'),
            'status_selection' => INTERVIEW_STATUS_SELECTION_DOC_PASS,
            'status_interview_adjustment' => INTERVIEW_STATUS_INTERVIEW_ADJUSTMENT_BEFORE_ADJUSTMENT,
            'remarks' => $this->faker->text
        ];
        $this->createDataMatching(Interview::class, $data);
        $job = new RemindInterViewJob();
        $job->handle();
        $this->assertNotification($userAdmin);
    }

    public function testOfferWithStagnantStatusUpdate(){
        $userAdmin = User::query()->where('type', SUPER_ADMIN)->first();
        $data = [
            'request_date' => Carbon::now()->subDay(6)->format('Y-m-d'),
            'status' => OFFER_STATUS_REQUESTING,
            'remarks' => $this->faker->text
        ];
        $this->createDataMatching(Offer::class, $data);
        $job = new RemindOfferJob();
        $job->handle();
        $this->assertNotification($userAdmin);
    }

    private function assertNotification($user){
        $notifications = \App\Models\Notification::query()
            ->where('type', RemindAccountNotification::class)
            ->where('notifiable_id', $user->id)->get();
        $this->assertNotEmpty($notifications);
        $this->assertTrue($notifications->count() > 0);
    }

    private function createDataMatching($model , $dataOther = array()){

        $hr = HR::query()->first();
        $work = Work::query()->first();
        if (!$work){
            $work = Work::factory()->create(['user_id' => Auth::id()]);
        }

        $data = [
            $model::HR_ID => $hr->id,
            $model::WORK_ID => $work->id,
            $model::DISPLAY =>'on',
            $model::CREATED_AT => Carbon::now()->subDay(6),
            $model::UPDATED_AT => Carbon::now()->subDay(6),
        ];
        $data = array_merge($data, $dataOther);
        $model::factory()->create($data);

    }

    private function createHrOrganization()
    {
        return HrOrganization::factory()->create(['user_id' => Auth::id()]);
    }

    private function createHrData()
    {
        return [
            HR::COUNTRY_ID => 1,
            HR::HR_ORGANIZATION_ID => $this->createHrOrganization()->id,
            HR::FULL_NAME => $this->faker->name,
            HR::FULL_NAME_JA => $this->faker->name,
            HR::GENDER => $this->faker->randomElement([1, 2]),
            HR::DATE_OF_BIRTH => $this->faker->dateTimeBetween('-73 years', '-18 years')->format('Y-m-d'),
            HR::WORK_FORM => "",
            HR::PERSONAL_PR_SPECIAL_NOTES => "",
            HR::JAPANESE_LEVEL => 1,
            HR::FINAL_EDUCATION_DATE => "2020-10",
            HR::FINAL_EDUCATION_CLASSIFICATION => "1",
            HR::FINAL_EDUCATION_DEGREE => 1,
            HR::MAJOR_CLASSIFICATION_ID => 1,
            HR::MIDDLE_CLASSIFICATION_ID => 1,
            HR::REMARKS => "",
            HR::TELEPHONE_NUMBER => "",
            HR::MOBILE_PHONE_NUMBER => "",
            HR::MAIL_ADDRESS => "test@gmail.com",
            HR::ADDRESS_CITY => "",
            HR::ADDRESS_DISTRICT => "",
            HR::ADDRESS_NUMBER => "",
            HR::ADDRESS_OTHER => "",
            HR::HOMETOWN_CITY => "",
            HR::HOME_TOWN_DISTRICT => "",
            HR::HOME_TOWN_NUMBER => "",
            HR::HOME_TOWN_OTHER => "",
            "main_jobs" => [
                [
                    "main_job_career_date_from" => "2023-01",
                    "to_now" => "no",
                    "main_job_career_date_to" => "2023-02",
                    "department_id" => "1",
                    "job_id" => "1",
                    "detail" => "gsfdfg"
                ]
            ],
        ];
    }

    private function createHrs($count = 5)
    {
        $hrs = [];
        for ($i = 0; $i < $count; $i++) {
            $result = $this->user_admin->post('api/hr', $this->createHrData());
            $hrs[] = $result->decodeResponseJson();
        }
        return $hrs;
    }
}
